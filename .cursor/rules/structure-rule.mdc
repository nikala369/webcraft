---
description: 
globs: 
alwaysApply: true
---
# Webcraft Auto Website Builder: Cursor Development Rules & AI Collaboration Guide
# Version: 3.1 (Date: 2025-01-XX)

# This document defines the development standards, architectural constraints, and AI collaboration protocols for the Webcraft Angular frontend project. Adherence ensures consistency, quality, and effective teamwork between human developers and the AI assistant.

# Write every time from start of every response NIKALAS AI BOT ON if you are using this mdc.

## 🤖 AI Agentic Workflow & Collaboration Protocols

1. **Persistence:** The AI assistant must keep going until the user's query is completely resolved, only yielding control when the problem is fully solved. Never terminate a turn prematurely.
2. **Tool-Calling:** The AI must use available tools to gather information about the codebase, files, or project structure. Never guess or make up answers—always verify by reading or searching as needed.
3. **Planning & Reflection:** The AI must plan extensively before each function call, and reflect on the outcomes of previous actions. Do not simply chain tool calls—think step by step, and explain reasoning and next steps for complex or multi-step tasks.
4. **Explicit Stepwise Execution:** For any non-trivial or multi-step task, the AI should outline a clear, step-by-step plan, investigate the codebase as needed, and verify each change or insight before proceeding.
5. **Mandatory Protocol:** These agentic protocols are required for all AI-driven code changes, reviews, and suggestions in this project. They ensure high-quality, reliable, and maintainable solutions, and must be followed alongside all other project rules.

## 🏗️ Project Architecture Overview

### Business Model
- **Free Trial**: Full builder access, cannot publish without subscription
- **Standard Plan**: Single-page websites with essential features (paid)
- **Premium Plan**: Multi-page websites with advanced features (paid)
- **Pricing**: Monthly subscription after free trial
- **No Free Tier**: Both plans require payment to publish

### Technical Stack
- **Frontend**: Angular 19+ with Standalone Components
- **State Management**: Angular Signals (reactive state management)
- **Styling**: SCSS with CSS Variables for dynamic theming
- **Backend**: Java Spring Boot REST API (consumed, not implemented)
- **Authentication**: JWT-based with secure token handling
- **Payments**: Stripe integration for subscriptions
- **Build System**: Angular CLI (no Bazel)

### Core Component Hierarchy
```
PreviewComponent (Central Hub)
├── StandardStructureComponent (Standard Plan - Single Page)
│   ├── StructureHeaderComponent
│   ├── HomeStandardComponent
│   │   ├── HeroSectionComponent
│   │   ├── AboutSectionComponent
│   │   ├── MenuSectionComponent (Restaurant)
│   │   ├── ServicesSectionComponent (Salon)
│   │   ├── ProjectsSectionComponent (Architecture/Portfolio)
│   │   └── ContactSectionComponent
│   └── StructureFooterComponent
├── PremiumStructureComponent (Premium Plan - Multi Page) [TO BE IMPLEMENTED]
│   ├── PageNavigationComponent [TO BE IMPLEMENTED]
│   ├── HomePage
│   ├── AboutPage
│   ├── ServicesPage
│   ├── ContactPage
│   └── CustomPages [TO BE IMPLEMENTED]
├── ComponentCustomizerComponent (Sidebar editor)
├── BusinessTypeSelectorComponent
├── ThemeSwitcherComponent
└── ViewManagementService (Fullscreen/view modes)
```

## 🌟 Core Philosophy

1. **Template-Centric Model:** All development must align with the core concept: users *configure* content and settings within pre-defined templates, **not** via free-form drag-and-drop.
2. **Value-Driven Design:** Every feature must justify the paid subscription. Focus on professional, polished, and unique designs that provide clear value.
3. **Plan Differentiation:** Clearly distinguish between Standard and Premium features. Standard should be compelling on its own while Premium offers clear upgrades.
4. **Business Type Focus:** Each business type should have tailored sections with industry-specific features that solve real business needs.
5. **Mobile-First Responsive:** All components must work seamlessly on mobile and desktop devices.
6. **API-First Data Management:** All data persistence happens through the backend API. Image uploads pending backend completion.

## 📚 Project Context & Understanding

### Mandatory Documentation Review
Before starting *any* task, thoroughly review relevant project documentation:
- `README.md`: Project overview and setup
- `docs/project-status-overview.md`: Current implementation status and roadmap
- `docs/component-development-guide.md`: Component creation guidelines
- `docs/backend-integration-guide.md`: API integration patterns
- `docs/component-data-flow.md`: State management and data flow
- `docs/plan-comparison.md`: Standard vs Premium features
- `docs/standard-plan-enhancement-guide.md`: Enhancement strategies
- `docs/premium-development-plan.md`: Premium plan roadmap
- `docs/development-roadmap.md`: Overall development timeline
- `docs/architecture-summary.md`: Quick architecture reference
- `docs/standard-customization-schema.json`: Data contracts

### Key Services to Understand
1. **PreviewComponent**: Central hub for website building
2. **TemplateInitializationService**: Handles template loading and initialization
3. **ViewManagementService**: Manages fullscreen and view modes
4. **UserTemplateService**: Handles template CRUD operations
5. **ComponentCustomizerComponent**: Sidebar editor for sections
6. **BusinessConfigService**: Provides business-type specific defaults

## ⚙️ Development Guidelines

### Component Development

1. **Standalone Components**: All new components must be standalone
   ```typescript
   @Component({
     selector: 'app-component-name',
     standalone: true,
     imports: [CommonModule, ...],
     templateUrl: './component-name.component.html',
     styleUrls: ['./component-name.component.scss']
   })
   ```

2. **Signal-Based State**: Use Angular Signals for state management
   ```typescript
   // Good
   data = signal<SectionData>(defaultData);
   computedValue = computed(() => this.data().title.toUpperCase());
   
   // Avoid
   data: SectionData = defaultData;
   get computedValue() { return this.data.title.toUpperCase(); }
   ```

3. **Plan-Aware Components**: Components must respect plan limitations
   ```typescript
   isPremium(): boolean {
     return this.planType === 'premium';
   }
   
   getMaxItems(): number {
     return this.isPremium() ? 20 : 10;
   }
   ```

4. **Business Type Awareness**: Components should adapt to business types
   ```typescript
   supportsBusinessType(): boolean {
     const supportedTypes = ['restaurant', 'cafe', 'bar'];
     return supportedTypes.includes(this.businessType);
   }
   ```

### Standard Plan Enhancement Guidelines

1. **Visual Excellence**: Every section must look professional and modern
   ```scss
   // Use smooth transitions
   .section-element {
     transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
   }
   
   // Add subtle animations
   @keyframes fadeInUp {
     from {
       opacity: 0;
       transform: translateY(20px);
     }
     to {
       opacity: 1;
       transform: translateY(0);
     }
   }
   ```

2. **Enhanced Interactivity**: Add hover effects and micro-interactions
   ```typescript
   // Add hover states for all interactive elements
   onMouseEnter(): void {
     this.isHovered.set(true);
   }
   
   onMouseLeave(): void {
     this.isHovered.set(false);
   }
   ```

3. **Business-Specific Features**: Each business type should have unique value
   - **Restaurant**: Menu with categories, special offers, dietary labels
   - **Salon**: Service packages, booking prep, staff showcase
   - **Architecture**: Project galleries, 3D renders support, awards
   - **Portfolio**: Case studies, client testimonials, process showcase

### Image Upload Integration (Pending)

```typescript
// Prepare components for image upload API
interface ImageUploadConfig {
  section: string;
  maxSize: number; // in MB
  acceptedTypes: string[];
  maxCount: number;
}

// TODO: Implement when API is ready
async uploadImage(file: File, config: ImageUploadConfig): Promise<string> {
  // Will integrate with backend API
  // For now, return placeholder
  return '/assets/placeholder.jpg';
}
```

### CSS Architecture

1. **CSS Variables**: Use for theming and dynamic styling
   ```scss
   .section {
     background-color: var(--section-bg-color);
     color: var(--section-text-color);
     padding: var(--section-padding);
   }
   ```

2. **Mobile-First**: Design for mobile, enhance for desktop
   ```scss
   .grid {
     display: grid;
     grid-template-columns: 1fr;
     gap: 1rem;
     
     @media (min-width: 768px) {
       grid-template-columns: repeat(2, 1fr);
       gap: 2rem;
     }
     
     @media (min-width: 1024px) {
       grid-template-columns: repeat(3, 1fr);
     }
   }
   ```

3. **Unique Design Elements**: Add distinctive touches
   ```scss
   // Custom shapes and masks
   .hero-section {
     clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
   }
   
   // Gradient overlays
   .section-overlay {
     background: linear-gradient(135deg, 
       rgba(var(--primary-rgb), 0.9) 0%, 
       rgba(var(--secondary-rgb), 0.7) 100%);
   }
   ```

## 🚀 Premium Plan Development Guidelines

### Multi-Page Architecture

1. **Page Structure**: Each page is a standalone component
   ```typescript
   PremiumStructureComponent
   ├── pages/
   │   ├── home-page/
   │   ├── about-page/
   │   ├── services-page/
   │   └── contact-page/
   ```

2. **Page Navigation**: Implement smooth page transitions
   ```typescript
   interface Page {
     id: string;
     name: string;
     path: string;
     component: Type<any>;
     isCustom: boolean;
     order: number;
   }
   ```

3. **Page Management**: Allow adding/removing/reordering pages
   - Maximum pages: 10 for Premium
   - Default pages: Home, About, Services, Contact
   - Custom pages: User-defined

### Enhanced Sections for Premium

1. **TestimonialsSection**
   - Customer reviews with ratings
   - Multiple layout options (carousel, grid, masonry)
   - Video testimonials support
   - Review management interface

2. **PricingSection**
   - Dynamic pricing tables
   - Comparison features
   - Seasonal pricing options
   - Currency selection

3. **TeamSection**
   - Team member profiles with roles
   - Skills and expertise
   - Social media integration
   - Achievement badges

4. **GalleryProSection**
   - Advanced filtering
   - Lightbox with zoom
   - Video integration
   - Download options

### Feature Gating

```typescript
// Component level
@Component({...})
export class SectionComponent {
  @Input() planType: 'standard' | 'premium' = 'standard';
  
  get availableFeatures() {
    return this.planType === 'premium' 
      ? ['basic', 'advanced', 'pro'] 
      : ['basic'];
  }
}

// Template level
<div *ngIf="planType === 'premium'" class="premium-features">
  <!-- Premium only content -->
</div>

// Customizer level
getFieldsForPlan(): FieldConfig[] {
  const baseFields = [...];
  return this.planType === 'premium' 
    ? [...baseFields, ...premiumFields] 
    : baseFields;
}
```

## 🎨 UI/UX Excellence Standards

1. **Professional Aesthetics**
   - Clean, modern design language
   - Consistent spacing and typography
   - Thoughtful color palettes
   - High-quality placeholder content

2. **Smooth Interactions**
   - Page transitions with easing
   - Hover effects on all interactive elements
   - Loading skeletons instead of spinners
   - Optimistic UI updates

3. **Accessibility First**
   - WCAG 2.1 AA compliance minimum
   - Keyboard navigation support
   - Screen reader friendly
   - High contrast mode support

4. **Performance Perception**
   - Lazy load images
   - Progressive enhancement
   - Smooth scrolling
   - Instant feedback

## 🔒 Security Guidelines

1. **No Secrets in Frontend**: Never store API keys, secrets, or sensitive data
2. **JWT Handling**: Store tokens securely, implement proper expiration handling
3. **Input Sanitization**: Sanitize all user inputs, especially for HTML content
4. **API Security**: Always validate permissions on the backend
5. **HTTPS Only**: Ensure all API calls use HTTPS in production

## 📊 Success Metrics

### Technical Metrics
- Lighthouse score > 95
- First Contentful Paint < 1.5s
- Time to Interactive < 3s
- No console errors in production

### Business Metrics
- Free trial to paid conversion > 15%
- Standard to Premium upgrade > 20%
- User satisfaction > 4.5/5
- Support ticket rate < 5%

## 🎯 Current Priorities

1. **Polish Standard Plan** (Priority 1)
   - Enhance visual design of all sections
   - Add micro-interactions and animations
   - Improve mobile experience
   - Add social media integration

2. **Prepare for Image API** (Priority 2)
   - Structure components for image uploads
   - Add placeholder UI for images
   - Implement image optimization logic
   - Create upload progress indicators

3. **Begin Premium Structure** (Priority 3)
   - Design multi-page navigation
   - Plan page management UI
   - Create premium section mockups
   - Define upgrade paths

4. **Business Type Expansion** (Priority 4)
   - Research new business types
   - Design industry-specific features
   - Create specialized content
   - Plan rollout strategy

## 🚨 Common Pitfalls to Avoid

1. **Don't** make Standard plan feel limited - it should feel complete
2. **Don't** add features without clear business value
3. **Don't** ignore mobile users - they're 60%+ of traffic
4. **Don't** overcomplicate the UI - simplicity sells
5. **Don't** forget loading states and error handling
6. **Don't** bypass plan limitations client-side
7. **Don't** store critical data in browser storage

## 💡 Innovation Guidelines

1. **Unique Value Props**
   - AI-powered content suggestions
   - Industry-specific SEO optimization
   - Automated social media integration
   - Smart image cropping and optimization

2. **Competitive Advantages**
   - Faster setup than competitors
   - More beautiful default designs
   - Better mobile experience
   - Superior customer support

3. **Future Features**
   - Voice-guided setup
   - A/B testing built-in
   - Email marketing integration
   - Appointment scheduling

---
*End of Webcraft Cursor Rules (Version 3.1)*